class LRUCache {
private:
      int capacity;
    list<pair<int, int>> cache;  
    unordered_map<int, list<pair<int, int>>::iterator> map; 
public:
    LRUCache(int capacity) {
          this->capacity = capacity;
    }
    
    int get(int key) {
        if (map.find(key) == map.end()) {
            return -1; 
             }

        auto it = map[key];
        int value = it->second;
        cache.erase(it);
        cache.push_front({key, value});
        map[key] = cache.begin();  

        return value;
    }
    
    void put(int key, int value) {
         if (map.find(key) != map.end()) {
            auto it = map[key];
            cache.erase(it);
        } else {
            if (cache.size() == capacity) {
                auto lru = cache.back();
                int lru_key = lru.first;
                cache.pop_back();
                map.erase(lru_key);
            }
        }
        cache.push_front({key, value});
        map[key] = cache.begin();
    }
};
